{"version":3,"sources":["components/Header.js","components/CountryDetailsPage.js","components/Form.js","components/ListElement.js","components/CountriesList.js","components/ErrorPage.js","components/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["Header","setDarkMode","darkMode","className","onClick","withRouter","match","countriesListData","setSelectValue","useState","currencies","languages","borders","population","countryDetails","setCountryDetails","useEffect","getCountryDetails","a","fetch","params","alpha3Code","then","response","json","data","to","alt","name","src","flag","nativeName","toLocaleString","region","subregion","capital","topLevelDomain","map","currency","Math","random","language","border","displayedCountry","filter","country","id","Form","setInputValue","setError","inputValue","selectValue","setCountriesDataForDisplay","countriesDataForDisplay","searchText","toLowerCase","includes","searchCountry","console","log","length","aria-label","placeholder","type","value","onChange","e","target","handleInputValue","handleSelect","ListElement","countryElement","CountriesList","ErrorPage","HomePage","error","App","setCountriesListData","getCountriesData","ok","Error","catch","basename","process","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7ca4f66.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Header.css'\r\n\r\nconst Header = ({ setDarkMode, darkMode}) => {\r\n    const handleColor = () => {\r\n        setDarkMode(!darkMode)\r\n        \r\n    } \r\n\r\n    return ( \r\n        <header className={darkMode ? 'header dark-mode dark-elements' : 'header ligth-mode ligth-elements'}>\r\n            <h4>Where in the world?</h4>\r\n            <button className={darkMode ? ' dark-mode ' : 'ligth-mode'} onClick={() => {handleColor()}}> <i className=\"fas fa-moon\"></i> Dark Mode</button>\r\n        </header>\r\n     );\r\n}\r\n \r\nexport default Header;","/* eslint-disable no-unused-expressions */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport '../styles/CountryDetailsPage.css'\r\n\r\nconst CountryDetailsPage = ({ match, darkMode, countriesListData,setSelectValue }) => {\r\n\r\n    const [countryDetails, setCountryDetails] = useState({\r\n        currencies: [],\r\n        languages: [],\r\n        borders: [],\r\n        population: ''\r\n    });\r\n\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        getCountryDetails()\r\n\r\n    }, [match])\r\n\r\n   \r\n    \r\n    const getCountryDetails = async () => {\r\n        await fetch(`https://restcountries.eu/rest/v2/alpha/${match.params.alpha3Code}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            setCountryDetails(data)\r\n            setSelectValue('Filter by Region')\r\n        })\r\n    }\r\n       \r\n\r\n    return ( \r\n        <div className='detail-page'>\r\n            <Link className={darkMode ? 'home-link dark-elements' : 'home-link ligth-elements' } to='/'> <i className={'fas fa-long-arrow-alt-left '}></i> Back</Link>\r\n\r\n        \r\n\r\n            <section className='detail-page-section' key={Math.random() * 999000} >\r\n                <div className='flag-img-container'>\r\n                    <img alt={`flag of ${countryDetails.name}`} src={`${countryDetails.flag}`}/>\r\n                </div>\r\n                <div className='country-detail-text-container'>\r\n                <h1>{countryDetails.name}</h1>\r\n                <p>Native Name: <span>{countryDetails.nativeName}</span></p>\r\n                <p>Population: <span>{countryDetails.population.toLocaleString()}</span></p>\r\n                <p>Region: <span>{countryDetails.region}</span></p>\r\n                <p>Sub Region: <span>{countryDetails.subregion}</span></p>\r\n                <p>Capital: <span>{countryDetails.capital}</span></p>\r\n                <p className='add-space'>Top Level Domain: <span>{countryDetails.topLevelDomain}</span></p>\r\n                <p>Currencies: {countryDetails.currencies.map(currency => <span key={Math.random() * 999000}>{`${currency.name}`}</span>)} </p>\r\n                <p>Languages: {countryDetails.languages.map(language => <span key={Math.random() * 999000}>{`${language.name}   , `}</span>)}          </p> \r\n        \r\n                <div className='borders-btn-container'>\r\n                 <  h4>Border Countries:</h4>\r\n\r\n                    {                                                                                                         \r\n    \r\n                        countryDetails.borders.map(border => {\r\n               \r\n                            const displayedCountry = countriesListData.filter((country) => country.alpha3Code === border)\r\n\r\n                            const name = displayedCountry.map(country => country.name)\r\n                            const id = displayedCountry.map(country => country.alpha3Code)\r\n            \r\n        \r\n             \r\n\r\n                        return(\r\n\r\n                                <Link to={`/${id}`}  id={id}\r\n                                    className={darkMode ? 'border-country dark-elements' : 'border-country ligth-elements' }\r\n                                    key={Math.random() * 999000}>\r\n                                    {name}\r\n                                </Link>\r\n                            )\r\n\r\n                        }\r\n                    )}\r\n    \r\n      \r\n                </div>\r\n                </div>\r\n                \r\n \r\n\r\n\r\n\r\n            </section>\r\n\r\n        \r\n            \r\n        </div>\r\n        \r\n     )\r\n    \r\n}\r\n \r\nexport default withRouter(CountryDetailsPage);\r\n","import React, {useEffect} from 'react';\r\nimport '../styles/Form.css'\r\nconst Form = ({ setInputValue, setError, inputValue, darkMode, selectValue, setSelectValue, countriesListData,setCountriesDataForDisplay, countriesDataForDisplay }) => {\r\n\r\n    const handleSelect = (e) => {\r\n        setSelectValue(e.target.value)\r\n    }\r\n    const handleInputValue = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n        const searchText = selectValue.toLowerCase()\r\n        if(selectValue === 'all' || selectValue === 'Filter by Region'){\r\n            setCountriesDataForDisplay(countriesListData)\r\n        } else{\r\n            setCountriesDataForDisplay(countriesListData.filter(country => country.region.toLowerCase().includes(searchText)))\r\n        }\r\n    \r\n    }, [selectValue])\r\n\r\n    useEffect(() => {\r\n\r\n        if(inputValue ===''){\r\n            setCountriesDataForDisplay(countriesListData)\r\n            setError(false)\r\n        } else{\r\n            const searchCountry = inputValue.toLowerCase()\r\n            setCountriesDataForDisplay(countriesListData.filter(country => country.name.toLowerCase().includes(searchCountry)))\r\n\r\n            setSelectValue('Filter by Region')\r\n            console.log(countriesDataForDisplay)\r\n            if(countriesDataForDisplay.length <= 0 ){\r\n                setError(true)\r\n            } else if(countriesDataForDisplay.length >= 0 ){\r\n                setError(false)\r\n            }\r\n        }\r\n        \r\n        \r\n    \r\n    }, [inputValue])\r\n\r\n    return ( \r\n        <form className={darkMode ? ' dark-mode' : ' ligth-mode'}>\r\n            <div className='input-wrapper'> \r\n                \r\n                    <i className={darkMode ? 'fas fa-search dark-mode dark-elements' : 'fas fa-search ligth-mode ligth-elements'}></i>\r\n            \r\n                <input\r\n                 aria-label='search'\r\n                 className={darkMode ? 'dark-mode dark-elements' : 'ligth-mode ligth-elements'}\r\n                 placeholder= ' Search for a country...' \r\n                 type='text' \r\n                 value={inputValue} \r\n                 onChange={(e) => {handleInputValue(e)}} />\r\n            </div>\r\n            <div className='select-wrapper'>\r\n            <select\r\n                onChange={(e) => {handleSelect(e)}}\r\n                value={selectValue}\r\n                className={darkMode ? 'dark-mode dark-elements' : 'ligth-mode ligth-elements'} name='regions' id='region-select'>\r\n                <option aria-label='option' value='Filter by Region'> Filter by Region</option>\r\n                <option aria-label='option' value='all'>All</option>\r\n                <option aria-label='option' value='africa'>Africa</option>\r\n                <option aria-label='option' value='americas'>Americas</option>\r\n                <option aria-label='option' value='asia'>Asia</option>\r\n                <option aria-label='option' value='europe'>Europe</option>\r\n                <option aria-label='option' value='oceania'>Oceania</option>\r\n            </select>\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/ListElement.css';\r\n\r\nconst ListElement = ({  countriesDataForDisplay, darkMode }) => {\r\n\r\n     const countryElement = countriesDataForDisplay.map(country => \r\n     < article className={darkMode ? 'dark-elements' : 'ligth-elements'} key={country.name}>\r\n            <img className='flag-img' alt={`flag of ${country.name}`} src={`${country.flag}`}/>\r\n        <div className='text-wrapper'>\r\n            <Link to={`/${country.alpha3Code}`}><h2 className={darkMode ? 'dark-elements' : 'ligth-elements'}>{country.name}</h2></Link>\r\n            <p>Population: <span>{country.population.toLocaleString()}</span></p>\r\n            <p>Region: <span>{country.region}</span></p>\r\n            <p>Capital: <span>{country.capital}</span></p>\r\n        </div>\r\n    </article>)\r\n    return ( \r\n    <div className='countries-wrapper'>\r\n        {countryElement}\r\n    </div> );\r\n}\r\n \r\nexport default ListElement;","import React from 'react';\r\nimport ListElement from './ListElement';\r\nimport '../styles/CountriesList.css';\r\nconst CountriesList = ({ countriesListData, countriesDataForDisplay, setCountriesDataForDisplay, darkMode, selectValue }) => {\r\n    \r\n\r\n    return ( \r\n        <div className={darkMode ? 'countries-list dark-mode' : 'countries-list light-mode'}>\r\n            <ListElement \r\n                darkMode={darkMode}\r\n                countriesListData={countriesListData}\r\n                countriesDataForDisplay={countriesDataForDisplay}\r\n                setCountriesDataForDisplay={setCountriesDataForDisplay}\r\n                selectValue={selectValue}\r\n            />\r\n            \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default CountriesList;","import React from 'react';\r\nimport '../styles/ErrorPage.css';\r\n\r\nconst ErrorPage = () => {\r\n    return(\r\n        <div className='error-page'>\r\n            <h1>Sorry we coudn't find what you are looking for</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorPage","import React from 'react';\r\nimport Form from './Form';\r\nimport CountriesList from './CountriesList';\r\nimport ErrorPage from './ErrorPage'\r\n\r\nconst HomePage = ({\r\n    error,\r\n    setError,\r\n    darkMode,\r\n    countriesListData,\r\n    countriesDataForDisplay,\r\n    setCountriesDataForDisplay,\r\n    selectValue, \r\n    setSelectValue,\r\n    inputValue,\r\n    setInputValue\r\n}) => {\r\n    return ( \r\n        <div>\r\n            <Form  \r\n                setError={setError}\r\n                darkMode={darkMode}\r\n                countriesListData={countriesListData}\r\n                countriesDataForDisplay={countriesDataForDisplay}\r\n                setCountriesDataForDisplay={setCountriesDataForDisplay}\r\n                selectValue={selectValue}\r\n                setSelectValue={setSelectValue}\r\n                inputValue={inputValue} \r\n                setInputValue={setInputValue}\r\n            />\r\n\r\n            {error ? <ErrorPage/> :\r\n            \r\n            <CountriesList \r\n                darkMode={darkMode}\r\n                countriesListData={countriesListData}\r\n                countriesDataForDisplay={countriesDataForDisplay}\r\n                setCountriesDataForDisplay={setCountriesDataForDisplay}\r\n                selectValue={selectValue}\r\n                setSelectValue={setSelectValue}\r\n            />\r\n}\r\n            \r\n            \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default HomePage;","import React, { useState, useEffect }from 'react';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Header from './components/Header';\nimport CountryDetailsPage from'./components/CountryDetailsPage';\nimport HomePage from './components/HomePage';\nimport './App.css';\n\nfunction App() {\n  const [error, setError] = useState(false);\n  const [darkMode, setDarkMode] = useState(true);\n  const [inputValue, setInputValue] = useState('');\n  const [selectValue, setSelectValue] = useState('Filter by Region')\n  const [countriesListData, setCountriesListData] = useState([]);\n  const [countriesDataForDisplay, setCountriesDataForDisplay] = useState([]);\n\n    useEffect(() => {\n        getCountriesData()\n    },[])\n\n  \n    \n    const getCountriesData = async () => {\n     \n        await fetch('https://restcountries.eu/rest/v2/all')\n        .then(response => {\n          if(response.ok){\n            return response\n          } \n          else {\n            throw Error('somthing went wrong')\n          }\n        })\n      .then(response => response.json())\n      .then(data => {\n        setCountriesListData(data)\n        setCountriesDataForDisplay(data)\n        setError(false)\n      })\n      .catch(error => {\n        setError(true)\n        setCountriesDataForDisplay([])\n      })\n      \n    }\n\n  \n      \n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n    <div className={darkMode ? 'App dark-mode' : 'App ligth-mode' }>\n      <Header darkMode={darkMode} setDarkMode={setDarkMode}/>\n      <Switch>\n        <Route path='/' exact>\n        <HomePage\n          error={error}\n          setError={setError}\n          darkMode={darkMode}\n          countriesListData={countriesListData}\n          countriesDataForDisplay={countriesDataForDisplay}\n          setCountriesDataForDisplay={setCountriesDataForDisplay}\n          selectValue={selectValue}\n          inputValue={inputValue} \n          setSelectValue={setSelectValue}\n          setInputValue={setInputValue}\n        />\n        </Route>\n    \n        <Route path='/:alpha3Code' exact > \n      {console.log()}\n          <CountryDetailsPage  \n            darkMode={darkMode}\n            countriesListData={countriesListData}\n            setSelectValue={setSelectValue}\n          \n          />\n        </Route>\n       \n        </Switch>\n\n      \n      \n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}